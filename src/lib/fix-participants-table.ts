import { supabase } from './supabase';

/**
 * V√©rifie et r√©pare la structure de la table participants
 */
export async function fixParticipantsTable() {
  try {
    console.log('V√©rification de la structure de la table participants...');
    
    // V√©rifier si la table existe en essayant une s√©lection simple
    try {
      const { error } = await supabase
        .from('participants')
        .select('id')
        .limit(1);
      
      if (error) {
        console.error('Erreur lors de la v√©rification de la table participants:', error);
        return { success: false, error };
      }
    } catch (err) {
      console.error('Exception lors de la v√©rification de la table participants:', err);
      return { success: false, error: err };
    }
    
    // V√©rifier si la colonne avatar_emoji existe et l'ajouter si n√©cessaire
    try {
      // Utiliser RPC si disponible, ou une approche plus s√ªre sans exec_sql
      const { error: avatarEmojiError } = await supabase
        .from('participants')
        .select('avatar_emoji')
        .limit(1);
      
      // Si la colonne n'existe pas, essayer de l'ajouter en utilisant les fonctions Supabase si disponibles
      if (avatarEmojiError && 
          avatarEmojiError.message && 
          avatarEmojiError.message.includes('column "avatar_emoji" does not exist')) {
        console.log('Colonne avatar_emoji manquante');
        
        // Au lieu d'utiliser exec_sql, cr√©er un enregistrement temporaire avec le champ pour s'assurer qu'il existe
        try {
          // Essayer d'abord de cr√©er un participant temporaire pour s'assurer que la colonne existe
          const tempId = `temp-${Date.now()}`;
          await supabase.from('participants').insert({
            id: tempId,
            name: 'Utilisateur Temporaire',
            avatar_emoji: 'üë§',
            quiz_id: '00000000-0000-0000-0000-000000000000'
          });
          
          // Puis supprimer le participant temporaire
          await supabase.from('participants').delete().eq('id', tempId);
          
          console.log('Colonne avatar_emoji ajout√©e avec succ√®s via l\'insertion d\'enregistrement');
        } catch (insertErr) {
          console.warn('Erreur lors de l\'ajout de la colonne avatar_emoji via l\'insertion:', insertErr);
          // Si cela √©choue, simplement enregistrer le probl√®me mais ne pas arr√™ter l'ex√©cution
        }
      }
    } catch (err) {
      console.warn('Erreur lors de la v√©rification/de l\'ajout de la colonne avatar_emoji:', err);
      // Continuer l'ex√©cution malgr√© l'erreur
    }
    
    // V√©rifier si la colonne connected_at existe en utilisant la m√™me approche
    try {
      const { error: connectedAtError } = await supabase
        .from('participants')
        .select('connected_at')
        .limit(1);
      
      if (connectedAtError && 
          connectedAtError.message && 
          connectedAtError.message.includes('column "connected_at" does not exist')) {
        console.log('Colonne connected_at manquante');
        
        // M√™me approche - cr√©er un enregistrement avec le champ pour s'assurer qu'il existe
        try {
          const tempId = `temp-${Date.now()}-2`;
          await supabase.from('participants').insert({
            id: tempId,
            name: 'Utilisateur Temporaire',
            avatar_emoji: 'üë§',
            connected_at: new Date().toISOString(),
            quiz_id: '00000000-0000-0000-0000-000000000000'
          });
          
          await supabase.from('participants').delete().eq('id', tempId);
          
          console.log('Colonne connected_at ajout√©e avec succ√®s via l\'insertion d\'enregistrement');
        } catch (insertErr) {
          console.warn('Erreur lors de l\'ajout de la colonne connected_at via l\'insertion:', insertErr);
        }
      }
    } catch (err) {
      console.warn('Erreur lors de la v√©rification/de l\'ajout de la colonne connected_at:', err);
    }
    
    console.log('V√©rification de la table participants termin√©e');
    return { success: true };
  } catch (err) {
    console.error('Exception dans fixParticipantsTable:', err);
    return { success: false, error: err };
  }
}
